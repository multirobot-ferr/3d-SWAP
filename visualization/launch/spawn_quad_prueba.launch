<?xml version="1.0"?>

<launch>

   <arg name="robot_name"/> <!-- Robot name defines the namespace for all topics regarding the robot -->
   <arg name="model" default="$(find mbzirc_gcs_view)/urdf/grvc_quadrotor.urdf.xacro"/>
   <arg name="tf_prefix" default="$(optenv ROS_NAMESPACE)"/>
   <arg name="pos_x" default="0.0"/>
   <arg name="pos_y" default="0.0"/>
   <arg name="pos_z" default="1.0"/>
   <arg name="id" default="1"/>

   <arg name="use_ground_truth_for_tf" default="true" />
   <arg name="use_ground_truth_for_control" default="true" />
   <arg name="use_pose_estimation" if="$(arg use_ground_truth_for_control)" default="false"/>
   <arg name="use_pose_estimation" unless="$(arg use_ground_truth_for_control)" default="true"/>

   <!-- send the robot XML to param server -->
   <param name="robot_description_$(arg robot_name)" command="$(find xacro)/xacro.py  '$(arg model)' model_name:=$(arg robot_name) id:=$(arg id)" />
   <param name="tf_prefix" type="string" value="$(arg tf_prefix)" />

   <!-- push robot_description to factory and spawn robot in gazebo -->
   <node name="spawn_robot" pkg="gazebo_ros" type="spawn_model"
     args="-param robot_description_$(arg robot_name)
           -urdf
           -x $(arg pos_x)
           -y $(arg pos_y)
           -z $(arg pos_z)
           -model $(arg robot_name)"
     respawn="false" output="screen"/>

   <!-- start robot state publisher -->
   <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher_$(arg robot_name)" output="screen" >
        <remap from="robot_description" to="robot_description_$(arg robot_name)" />
        <remap from="joint_states" to="joint_states_$(arg robot_name)" />
        <param name="publish_frequency" type="double" value="50.0" />
   </node>

   <!-- publish state and tf -->
   <node name="ground_truth_to_tf" pkg="message_to_tf" type="message_to_tf" output="screen">
     <param name="odometry_topic" value="/quad1/ground_truth/state" />
     <param name="frame_id" value="/world" />
     <param name="tf_prefix" value="$(arg tf_prefix)" if="$(arg use_ground_truth_for_tf)" />
     <param name="tf_prefix" value="$(arg tf_prefix)/ground_truth" unless="$(arg use_ground_truth_for_tf)" />
   </node>
   <!--group if="$(arg use_pose_estimation)">
     <node name="pose_estimation" pkg="hector_quadrotor_pose_estimation" type="hector_quadrotor_pose_estimation" output="screen">
       <rosparam file="$(find hector_quadrotor_pose_estimation)/params/simulation.yaml" />
       <param name="nav_frame" value="$(arg tf_prefix)/nav" />
       <param name="publish_world_nav_transform" value="true" />
       <param name="tf_prefix" value="$(arg tf_prefix)" unless="$(arg use_ground_truth_for_tf)" />
       <param name="tf_prefix" value="$(arg tf_prefix)/pose_estimation" if="$(arg use_ground_truth_for_tf)" />
     </node>
   </group-->

    <!-- Spawn launch hal controller -->
    <node name="grvc_hal_$(arg robot_name)" pkg="grvc_quadrotor_hal" type="hal_node" respawn="false" output="screen"
        args="-hal_ns=/$(arg robot_name)/hal -wp_topic=go_to_wp -gazebo_ns=/$(arg robot_name)"/>

    <!--node name="rviz" pkg="rviz" type="rviz" output="screen" /-->

</launch>
