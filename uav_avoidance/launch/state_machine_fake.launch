<!--
/*
 * Copyright (c) 2017, University of Duisburg-Essen, swap-ferr
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of swap-ferr nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 @author Eduardo Ferrera
 @version 0.1
 @date    7/3/17 
 
 @short: Launches a fake state machine to play with SWAP
 
 The following state machine is meant to take off the quadcopter and make it move 
 to different locations. It receives all necessary commands from SWAP to avoid
 conflicts.
 
 This is just an implementation example of how the state machine of the full
 system should interact with SWAP, but can be used to test with the real 
 uav
 
 Note: For some reason, the command of land() is not working. Take that into
 account for the real experiments.
 -->


<launch>

	<!-- Configurable parameters -->
	<arg name="robot_number" default="1"/>

    <group ns="/uav_$(arg robot_number)">
        <node pkg="uav_avoidance" type="state_machine" name="state_machine" output="screen">
            <param name="uav_id" value="$(arg robot_number)"/>
            <param name="ual_namespace" value=""/>    
            <param name="z_distance" value="3.0"/>  <!-- Distance between the uav's in the z axis -->
            <param name="d_goal" value="1.0"/>      <!-- Distance to consider that a uav is on a goal -->

            <param name="goals_path" value="$(find uav_avoidance)/logs/goals.txt"/> <!-- File containing a set of goals -->
        </node>
    </group>
</launch>
