<!--
/*
 * Copyright (c) 2017, University of Duisburg-Essen, swap-ferr
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of swap-ferr nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 @author Eduardo Ferrera
 @version 1.0
 @date    12/3/17 
 
 @short: Launches avoidance::swap for a simple uav
 
 The system launches a SWAP avoidance system to detect conflicts and avoid 
 collisions between uavs.
 -->


<launch>

	<!-- Configurable parameters -->
	<arg name="robot_number" default="1"/>
    <arg name="file_path"    default="$(find uav_avoidance)/logs/"/>
	
	<group ns="uav_$(arg robot_number)">

    	<node pkg="uav_avoidance" type="swap_2_5d" name="avoidance_swap" output="screen">

            <param name="ual_namespace" value=""/>
            
	        <!-- Parameters for SWAP -->
	
	        <!-- Debugging parameters -->
	            <!-- Comment out this parameter for long experiments. Log files can take too much space.-->
	        <param name="debug/file_path" value="$(arg file_path)"/>
	        
            <!-- General configuration parameters -->
            
            <!-- Time that the algorithm remains sleeping in a loop -->
                <param name="spin_sleep" value="0.1"/>

                <!-- The UAVs are 1.2x1.2m. Meaning that from the center to the
                      corner there are sqrt((1.2/2)^2 + (1.2/2)^2) = 1.2*sqrt(2)/2 = 0.8486
                      Set it to the real value -->
                <param name="swap/safety_radius" value="0.8486"/>

                <!-- Swap will start avoiding when the distance between 2 uavs 
                is less or equal than: 
                    2x(braking_distance + positioning_error + gamma_offset)
                Please take into account that all variables are taken into 
                account twice!
                -->

                <!-- I am assuming that the uav is able to stop in 2m -->
                <param name="swap/braking_distance" value="1.25"/>   <!-- The uav is capable of breacking in 1.25m-->

                <!-- I am assuming that the largest error in the positioning
                system is 1m. -->
                <param name="swap/positioning_error" value="1.0"/> 

                <!-- Start playing with this parameter if you want to increase
                the safety of your system -->
                <param name="swap/gamma_offset" value="0.5"/>
		
		<!--if distance between uavs is larger than dz_min dont swap -->
		<param name="swap/dz_min" value="10"/>

		<!--if distance between uavs is larger than dz_min dont swap -->
		<param name="swap/dz_range" value="1"/>

                <!--  #######  Carefully tunning ########### -->
                <!-- This parameter will help to the robots to keep the 
                discante while avoiding. I disabled the atraction system to 
                the uavs. This parameter will start working only when the distance 
                is less or equal than:
                    1x(braking_distance + positioning_error + gamma_offset)
                If active, will force the robot to go away because the distance
                to the object starts to be too risky
                 -->
                <param name="swap/rotation_ctrl_p" value="0.0"/>

                <!-- When avoidance sends speed commands, it will send a vector
                with a modulus equal to uav_vector_speed -->
                <param name="uav_vector_speed" value="1"/>
                <!--  #################################### -->

                
                
            <!-- Specific configuration parameters [do not change them if not necessary]-->
            <param name="uav_id" value="$(arg robot_number)"/>
            <rosparam param="uav_ids">[1, 2, 3, 4]</rosparam>
            <param name="swap/granularity" value="360"/>    <!-- One measurement set per degree -->
            <param name="swap/num_measurements" value="3"/>    <!-- 3 measurements per measurement set (fights against noise) -->
            <!-- If two values commes on the same run, takes only the closer to the robot -->
            <!-- In our case this value has to be 0.0. Otherwise, an object measurement
            that is placed really far away will make values move away from the realistic ones
            E.g:  EvalRobot_x =  0.0
                  Object1_x   =  3.0
                  Object2_x   = 30.0

                  A multi_input_pond = 0.1 will make the robot think that the object
                  that is placed in the x direction is in:
                    d = (1.0 - 0.1/2) * 3.0 + (0.1/2) * 30.0 =
                            0.95      * 3.0 +   0.05  * 30.0 = 4.35
            -->
            <param name="swap/multi_input_pond" value="0.0"/>
        
        </node>
    </group>
</launch>
